@namespace Tessera.Core.Components.Widgets

@inject ILibraryService LibraryService
@inject NavigationManager Navigation

<div class="ts-auth-container">
    <p class="ts-auth-errors @(string.IsNullOrWhiteSpace(FirstNameError.ToString()) ? "" : "visible")">@FirstNameError</p>
    <div class="ts-auth-container-item">
        <div class="ts-label-container">
            <label for="fn-input" class="ts-label">First Name</label>
        </div>
        <div class="ts-input-container">
            <input class="ts-primary-input" type="text" id="fn-input" required="" @bind="FirstName">
        </div>
    </div>
    <p class="ts-auth-errors @(string.IsNullOrWhiteSpace(LastNameError.ToString()) ? "" : "visible")">@LastNameError</p>
    <div class="ts-auth-container-item">
        <div class="ts-label-container">
            <label for="ln-input" class="ts-label">Last Name</label>
        </div>
        <div class="ts-input-container">
            <input class="ts-primary-input" type="text" id="ln-input" required="" @bind="LastName">
        </div>
    </div>
    <p class="ts-auth-errors @(string.IsNullOrWhiteSpace(EmailError.ToString()) ? "" : "visible")">@EmailError</p>
    <div class="ts-auth-container-item">
        <div class="ts-label-container">
            <label for="em-input" class="ts-label">Email</label>
        </div>
        <div class="ts-input-container">
            <input class="ts-primary-input" type="text" id="em-input" required="" @bind="Email">
        </div>
    </div>
    <p class="ts-auth-errors ">@ConfirmEmailError</p>
    <div class="ts-auth-container-item">
        <div class="ts-label-container">
            <label for="ce-input" class="ts-label">Confirm Email</label>
        </div>
        <div class="ts-input-container">
            <input class="ts-primary-input" type="text" id="ce-input" required="" @bind="ConfirmEmail">
        </div>
    </div>
    <p class="ts-auth-errors">@PasswordError</p>
    <div class="ts-auth-container-item">
        <div class="ts-label-container">
            <label for="pw-input" class="ts-label">Password</label>
        </div>
        <div class="ts-input-container">
            <input class="ts-primary-input" type="text" id="pw-input" required="" @bind="Password">
        </div>
    </div>
    <p class="ts-auth-errors">@ConfirmPasswordError</p>
    <div class="ts-auth-container-item">
        <div class="ts-label-container">
            <label for="cp-input" class="ts-label">Confirm Password</label>
        </div>
        <div class="ts-input-container">
            <input class="ts-primary-input" type="text" id="cp-input" required="" @bind="ConfirmPassword">
        </div>
    </div>
    <p class="ts-auth-errors">@GenericError</p>
    <button class="ts-primary-btn" @onclick="RegisterAsync">Register</button>
    <button class="ts-secondary-btn" @onclick="SwitchToLogin">Back To Login</button>
</div>

@code {
    [Parameter] public EventCallback OnSwitchToLogin { get; set; }
    [Parameter] public EventCallback OnSwitchToCreateOrg { get; set; }
    string test = "visisble";

    // RegisterDefualtModel Inputs
    private string FirstName { get; set; } = "TestDummy";
    private string LastName { get; set; } = "Three";
    private string Email { get; set; } = "td3@test.com";
    private string ConfirmEmail { get; set; } = "td3@test.com";
    private string Password { get; set; } = "Test@123";
    private string ConfirmPassword { get; set; } = "Test@123";

    // Error Messages
    private MarkupString FirstNameError { get; set; }
    private MarkupString LastNameError { get; set; }
    private MarkupString EmailError { get; set; }
    private MarkupString ConfirmEmailError { get; set; }
    private MarkupString PasswordError { get; set; }
    private MarkupString ConfirmPasswordError { get; set; }
    private string GenericError { get; set; }

    private async Task RegisterAsync()
    {
        var model = new RegisterDefaultModel
        {
            FirstName = FirstName,
            LastName = LastName,
            Email = Email,
            ConfirmEmail = ConfirmEmail,
            Password = Password,
            ConfirmPassword = ConfirmPassword
        };

        ResetErrorMessages();

        JObject result = await LibraryService.RegisterAsync(model);

        if (result.ContainsKey("result"))
        {
            string resultString = result["result"].ToString();

            if (resultString == Keys.API_REG_SUCC || resultString == Keys.API_GENERIC_SUCC)
            {
                // Redirect to login page after successful registration
                var loginModel = new LoginDefaultModel
                {
                    Email = Email,
                    Password = Password,
                    RememberMe = false
                };

                JObject loginResult = await LibraryService.LoginAsync(loginModel);
                resultString = loginResult["result"].ToString();
                if (resultString == Keys.API_LOGIN_SUCC || resultString == Keys.API_GENERIC_SUCC)
                {
                    await SwitchToCreateOrg();
                }
                else
                {
                    GenericError = "Registration Succeeded. Attempt to login Failed.";
                }
            }
        }

        else if (result.ContainsKey("errors"))
        {
            try
            {
                JObject errors = JObject.Parse(result["errors"].ToString());
                StringBuilder FNameErrorMessages = new StringBuilder();
                StringBuilder LNameErrorMessages = new StringBuilder();
                StringBuilder EmailErrorMessages = new StringBuilder();
                StringBuilder CEmailErrorMessages = new StringBuilder();
                StringBuilder PassErrorMessages = new StringBuilder();
                StringBuilder CPassErrorMessages = new StringBuilder();

                if (errors.ContainsKey("FirstName"))
                {
                    JArray FNameErrorsArray = (JArray)errors["FirstName"];
                    FNameErrorMessages.AppendLine(string.Join("<br />", FNameErrorsArray.Select(e => e.ToString())));
                    FNameErrorMessages.Append("<br />");
                    FirstNameError = new MarkupString(FNameErrorMessages.ToString());
                }
                if (errors.ContainsKey("LastName"))
                {
                    JArray LNameErrorsArray = (JArray)errors["LastName"];
                    LNameErrorMessages.AppendLine(string.Join("<br />", LNameErrorsArray.Select(e => e.ToString())));
             
                    LastNameError = new MarkupString(LNameErrorMessages.ToString());
                }
                if (errors.ContainsKey("Email"))
                {
                    JArray EmailErrorsArray = (JArray)errors["Email"];
                    EmailErrorMessages.AppendLine(string.Join("<br />", EmailErrorsArray.Select(e => e.ToString())));
                    EmailErrorMessages.Append("<br />");
                    EmailError = new MarkupString(EmailErrorMessages.ToString());
                }
                if (errors.ContainsKey("ConfirmEmail"))
                {
                    JArray CEmailErrorsArray = (JArray)errors["ConfirmEmail"];
                    CEmailErrorMessages.AppendLine(string.Join("<br />", CEmailErrorsArray.Select(e => e.ToString())));
                    CEmailErrorMessages.Append("<br />");
                    ConfirmEmailError = new MarkupString(CEmailErrorMessages.ToString());
                }
                if (errors.ContainsKey("Password"))
                {
                    JArray PassErrorsArray = (JArray)errors["Password"];
                    PassErrorMessages.AppendLine(string.Join("<br />", PassErrorsArray.Select(e => e.ToString())));
                    PassErrorMessages.Append("<br />");
                    PasswordError = new MarkupString(PassErrorMessages.ToString());
                }
                if (errors.ContainsKey("ConfirmPassword"))
                {
                    JArray CPassErrorsArray = (JArray)errors["ConfirmPassword"];
                    CPassErrorMessages.AppendLine(string.Join("<br />", CPassErrorsArray.Select(e => e.ToString())));
                    CPassErrorMessages.Append("<br />");
                    ConfirmPasswordError = new MarkupString(CPassErrorMessages.ToString());
                }
            }
            catch (Newtonsoft.Json.JsonReaderException)
            {
                //if (result)
                string errorsStr = result["errors"].ToString();
                JArray errorsAry = JArray.Parse(errorsStr);

                foreach (JObject errorObj in errorsAry)
                {
                    if (errorObj.TryGetValue("code", out JToken value))
                    {
                        string error = value.ToString();
                        if (error == Keys.API_REG_CODE_1)
                        {
                            GenericError = "An account with that email already exists";
                        }
                    }
                    else
                        GenericError = "Generic Error";
                }


            }

        }
    }

    private async Task SwitchToLogin()
    {
        ResetErrorMessages();

        if (OnSwitchToLogin.HasDelegate)
        {
            await OnSwitchToLogin.InvokeAsync(null);
        }
    }

    private async Task SwitchToCreateOrg()
    {
        ResetErrorMessages();

        if (OnSwitchToCreateOrg.HasDelegate)
        {
            await OnSwitchToCreateOrg.InvokeAsync(null);
        }
    }

    private void ResetErrorMessages()
    {
        FirstNameError = new MarkupString(string.Empty);
        LastNameError = new MarkupString(string.Empty);
        EmailError = new MarkupString(string.Empty);
        ConfirmEmailError = new MarkupString(string.Empty);
        PasswordError = new MarkupString(string.Empty);
        ConfirmPasswordError = new MarkupString(string.Empty);
        GenericError = null;
    }
}
