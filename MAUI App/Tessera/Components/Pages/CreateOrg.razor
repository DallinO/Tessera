@inject ILibraryService LibraryService
@inject NavigationManager Navigation


<div class="auth-container">
    <div class="input-container">
        <input type="text" id="input" required="" @bind="Name">
        <label for="input" class="label">Name</label>
        <div class="underline"></div>
    </div>
    <div class="input-container">
        <input type="text" id="input" required="" @bind="ConfirmName">
        <label for="input" class="label">Confirm Name</label>
        <div class="underline"></div>
    </div>
    <button class="btn-primary" @onclick="CreateOrgAsync">Create Book</button>
    <button class="cus-btn-secondary" @onclick="OnSwitchToLogin">Return To Login</button>
    <p class="login-errors">@OrgError</p>
</div>


@code {
    [Parameter] public EventCallback OnSwitchToLogin { get; set; }
    [Parameter] public EventCallback OnSwitchToSelectOrg { get; set; }

    private string Name{ get; set; } = "Test Book One";
    private string ConfirmName { get; set; } = "Test Book One";
    private MarkupString OrgError { get; set; }

    private async Task CreateOrgAsync()
    {
        var model = new BookModel
        {
            Name = Name,
            ConfirmName = ConfirmName
        };

        var result = await LibraryService.CreateBookAsync(model);

        if (result.ContainsKey("result"))
        {
            string resultString = result["result"]?.ToString();
            if (resultString == Keys.API_GENERIC_SUCC || resultString == Keys.API_ORG_SUCC)
            {
                switch (LibraryService.Books.Length)
                {
                    case 0:
                        OrgError = new MarkupString("Book Created. Failed To Retrieve Books Data.");
                        break;

                    case 1:
                        await SwitchToSelectOrg();
                        break;

                    default:
                        await SwitchToSelectOrg(); // Redirect to dashboard or another page on successful login
                        break;
                }
            }
            else
            {
                await SwitchToLogin();
            }
        }
        else if (result.ContainsKey("errors"))
        {
            StringBuilder errorMessages = new StringBuilder();

            try
            {
                JObject errors = JObject.Parse(result["errors"]?.ToString());

                if (errors.ContainsKey("Email"))
                {
                    JArray emailErrorsArray = (JArray)errors["Email"];
                    errorMessages.AppendLine(string.Join(", ", emailErrorsArray.Select(e => e.ToString())));
                    errorMessages.Append("<br />");
                }
                if (errors.ContainsKey("Password"))
                {
                    JArray passwordErrorsArray = (JArray)errors["Password"];
                    errorMessages.AppendLine(string.Join(", ", passwordErrorsArray.Select(e => e.ToString())));
                    errorMessages.Append("<br />");
                }

                OrgError = new MarkupString(errorMessages.ToString());
            }
            catch (Newtonsoft.Json.JsonReaderException)
            {
                if (String.IsNullOrEmpty(result["errors"].ToString()))
                    OrgError = new MarkupString("Book Could Not Be Created");
                else
                    OrgError = new MarkupString(result["errors"].ToString());
            }
        }
    }

    private async Task SwitchToLogin()
    {
        if (OnSwitchToLogin.HasDelegate)
        {
            await OnSwitchToLogin.InvokeAsync(null);
        }
    }

    private async Task SwitchToSelectOrg()
    {
        if (OnSwitchToSelectOrg.HasDelegate)
        {
            await OnSwitchToSelectOrg.InvokeAsync(null);
        }
    }
}
