@page "/login"
@inject IAuthService AuthService
@inject NavigationManager Navigation
@using Tessera.Models
@using Tessera.Constants;
@using Newtonsoft.Json.Linq;
@using System.Text;


@if (AuthService.IsAuthenticated)
{
    <p>You are already logged in.</p>
}
else
{
    <div class="auth-container">
        <div class="input-container">
            <input type="text" id="input" required="" @bind="Email">
            <label for="input" class="label">Email</label>
            <div class="underline"></div>
        </div>
        <div class="input-container">
            <input type="text" id="input" required="" @bind="Password">
            <label for="input" class="label">Password</label>
            <div class="underline"></div>
        </div>
        <button class="btn-primary" @onclick="LoginAsync">Login</button>
        <button class="cus-btn-secondary" @onclick="SwitchToRegister">Register</button>
        <p class="login-errors">@LoginError</p>
    </div>
}

@code {
    [Parameter] public EventCallback OnSwitchToRegister { get; set; }

    private string Email { get; set; }
    private string Password { get; set; }
    private MarkupString LoginError { get; set; }

    private async Task LoginAsync()
    {
        var model = new LoginDefaultModel
        {
            Email = Email,
            Password = Password,
            RememberMe = false
        };

        JObject result = await AuthService.Login(model);
        string resultString = result["result"]?.ToString();
        JObject errors = JObject.Parse(result["errors"]?.ToString());

        if (resultString == Keys.API_GENERIC_SUCC || resultString == Keys.API_LOGIN_SUCC)
        {
            Navigation.NavigateTo("/"); // Redirect to dashboard or another page on successful login
        }
        else
        {
            StringBuilder errorMessages = new StringBuilder();
            bool genericErrorFlag = true;

            if (errors.ContainsKey("Email"))
            {
                JArray emailErrorsArray = (JArray)errors["Email"];
                errorMessages.AppendLine(string.Join(", ", emailErrorsArray.Select(e => e.ToString())));
                errorMessages.Append("<br />");
                genericErrorFlag = false;
            }
            if (errors.ContainsKey("Password"))
            {
                JArray passwordErrorsArray = (JArray)errors["Password"];
                errorMessages.AppendLine(string.Join(", ", passwordErrorsArray.Select(e => e.ToString())));
                errorMessages.Append("<br />");
                genericErrorFlag = false;
            }
            if (genericErrorFlag)
                LoginError = new MarkupString("Login failed. Please check your credentials.");
            else
                LoginError = new MarkupString(errorMessages.ToString());
        }
    }

    private async Task SwitchToRegister()
    {
        if (OnSwitchToRegister.HasDelegate)
        {
            await OnSwitchToRegister.InvokeAsync(null);
        }
    }
}
