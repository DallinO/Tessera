@namespace Tessera.Web

@inject IApiService Api
@inject NavigationManager Navigation
@inject IBookService Book

@page "/resetpassword"

<div class="ts-auth-page">
    <div class="ts-auth-container">
        <div class="ts-auth-container-item">
            <div class="ts-label-container">
                <label for="em-input" class="ts-label">Email</label>
            </div>
            <div class="ts-input-container">
                <input class="ts-primary-input" type="text" id="em-input" required="" @bind="Email">
            </div>
        </div>
        <div class="ts-auth-container-item">
            <div class="ts-label-container">
                <label for="pw-input" class="ts-label">New Password</label>
            </div>
            <div class="ts-input-container">
                <input class="ts-primary-input" type="text" id="pw-input" required="" @bind="NewPassword">
            </div>
        </div>
        <div class="ts-auth-container-item">
            <div class="ts-label-container">
                <label for="cp-input" class="ts-label">Confirm Password</label>
            </div>
            <div class="ts-input-container">
                <input class="ts-primary-input" type="text" id="cp-input" required="" @bind="ConfirmPassword">
            </div>
        </div>
        <div class="ts-auth-container-item">
            <button class="ts-primary-btn" @onclick="ResetPasswordAsync">Confirm</button>
        </div>
        <div class="ts-auth-container-btn-container">
            <button class="ts-secondary-btn" @onclick="SwitchToLogin">Back To Login</button>
        </div>
        @if (ShowErrors)
        {
            <div class="ts-auth-container-item-bottom">
                <p class="ts-auth-errors @(ShowErrors ? "visible" : "")">
                    @RegisterError
                </p>
            </div>
        }
    </div>
</div>

@code {
    private bool ShowErrors { get; set; } = false;

    private string Email { get; set; } = "td3@test.com";
    private string NewPassword { get; set; } = "Test@999";
    private string ConfirmPassword { get; set; } = "Test@999";

    private MarkupString RegisterError { get; set; }

    private async Task ResetPasswordAsync()
    {
        var model = new ResetPasswordRequest
        {
            Email = Email,
            Password = NewPassword,
            ConfirmPassword = ConfirmPassword
        };

        var result = await Api.ResetPasswordAsync(model);

        if (result != null)
        {
            if (result.Success)
            {
                SwitchToLogin();
            }
            else
            {
                DisplayErrors(result.Errors);
            }
        }
    }

    private async Task SwitchToLogin()
    {
        ResetErrors();
        Navigation.NavigateTo("/login");
    }

    private async Task SwitchToLogin(List<string> errors)
    {
        ResetErrors();
        Navigation.NavigateTo("/login");
    }

    private void ResetErrors()
    {
        ShowErrors = false;
        RegisterError = new MarkupString();
    }

    private void DisplayErrors(List<string> errors)
    {
        ResetErrors();
        StringBuilder errorMessage = new();
        foreach (string error in errors)
        {
            errorMessage.AppendLine(string.Join("<br />", error));
            errorMessage.Append("<br />");
        }
        RegisterError = new MarkupString(errorMessage.ToString());
        ShowErrors = true;
        StateHasChanged();
    }
}
