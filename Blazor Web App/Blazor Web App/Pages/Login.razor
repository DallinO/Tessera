@namespace Tessera.Web.Pages

@inject IBookService Library
@inject IApiService Api
@inject NavigationManager Navigation

@page "/login"

<div class="ts-auth-page">
    <div class="ts-auth-container">
        <div class="ts-auth-container-item-top">
            <div class="ts-label-container">
                <label for="email-input" class="ts-label">Email</label>
            </div>
            <div class="ts-input-container">
                <input class="ts-primary-input" type="text" id="email-input" required="" @bind="Email">
            </div>
        </div>
        <div class="ts-auth-container-item">
            <div class="ts-label-container">
                <label for="pw-input" class="ts-label">Password</label>
            </div>
            <div class="ts-input-container">
                <input class="ts-primary-input" type="text" id="pw-input" required="" @bind="Password">
            </div>
        </div>
        <div>
            <div class="ts-auth-container-item">
                <button class="ts-primary-btn" @onclick="LoginAsync">Login</button>
            </div>
            <div class="ts-auth-container-btn-container">
                <button class="ts-secondary-btn" @onclick="SwitchToRegister">Register</button>
            </div>
            <div class="ts-auth-container-btn-container">
                <button class="ts-secondary-btn" @onclick="ForgotPassword">Forgot Password?</button>
            </div>
        </div>
        @if (ShowErrors)
        {
            <div class="ts-auth-container-item-bottom">
                <p class="ts-auth-errors @(ShowErrors ? "visible" : "")">
                    @LoginError
                </p>
            </div>
        }
    </div>
</div>

@code {
    private bool ShowErrors { get; set; } = false;
    private string Email { get; set; } = "td1@test.com";
    private string Password { get; set; } = "Test@999";
    private MarkupString LoginError { get; set; }

    private async Task LoginAsync()
    {
        var model = new LoginRequest
        {
            Email = Email,
            Password = Password,
            RememberMe = false
        };

        var login = await Api.LoginAsync(model);

        if (login.Success)
        {
            Library.AppUser = login.AppUser;
            var book = await Api.GetBookIdAsync();
            if (book.Success)
            {
                Library.BookId = book.BookId;
                Library.IsAuthenticated = true;
                Library.TokenExp = login.Expiration;
                Navigation.NavigateTo($"/b/{book.BookId}");
                ResetErrors();
            }
            else
            {
                DisplayErrors(book.Errors);
            }
        }
        else
        {
            DisplayErrors(login.Errors);
        }
    }

    private void SwitchToRegister()
    {
        Navigation.NavigateTo("/register");
    }

    private void ForgotPassword()
    {
        Navigation.NavigateTo("/resetpassword");
    }

    private void ResetErrors()
    {
        ShowErrors = false;
        LoginError = new MarkupString();
    }

    private void DisplayErrors(List<string> errors)
    {
        ResetErrors();
        StringBuilder errorMessage = new();
        foreach (string error in errors)
        {
            errorMessage.AppendLine(string.Join("<br />", error));
            errorMessage.Append("<br />");
        }
        LoginError = new MarkupString(errorMessage.ToString());
        ShowErrors = true;
        StateHasChanged();
    }
}