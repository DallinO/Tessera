@namespace Tessera.Web.Pages

@page "/b/{BookId:int}/d/{DocId:int}"

@layout BookLayout
@inject NavigationManager Navigation
@inject IBookService Book
@inject IApiService Api
@inject IJSRuntime JS

@if (_document != null 
    && !string.IsNullOrEmpty(_content.Value))
{
    <PageTitle>@_document.Title</PageTitle>

    <div class="ts-top-row ts-utility ts-border">
        <div class="ts-utility-root">
                @_document.Title
        </div>
        <div class="ts-utility-search">
        </div>
        <div class="ts-utility-account-container">
            <button class="ts-account-button">
                            
            </button>
        </div>
    </div>
    <div>
        <BlazoredTextEditor>
            <ToolbarContent>
                <div class="ts-document-header">
                    <select class="ql-header">
                        <option selected=""></option>
                        <option value="1"></option>
                        <option value="2"></option>
                        <option value="3"></option>
                        <option value="4"></option>
                        <option value="5"></option>
                    </select>
                    <span class="ql-formats">
                        <button class="ql-bold"></button>
                        <button class="ql-italic"></button>
                        <button class="ql-underline"></button>
                        <button class="ql-strike"></button>
                    </span>
                    <span class="ql-formats">
                        <select class="ql-color"></select>
                        <select class="ql-background"></select>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-list" value="ordered"></button>
                        <button class="ql-list" value="bullet"></button>
                    </span>
                    <span class="ql-formats">
                        <button class="ql-link"></button>
                    </span>
                    <span>
                        <button class="ts-primary-btn" @onclick="Save">Save</button>
                    </span>
                </div>
            </ToolbarContent>
            <EditorContent>
                @_content
            </EditorContent>
        </BlazoredTextEditor>
    </div>
}
else
{
    <PageTitle>@DocId</PageTitle>
}

@code {
    [Parameter] public int BookId { get; set; }
    [Parameter] public int DocId { get; set; }

    //private BlazoredTextEditor QuillHtml;
    private DocumentDto? _document;
    private MarkupString _content;

    protected override async Task OnParametersSetAsync()
    {

        var response = await Api.GetDocumentAsync(BookId, DocId);
        if (response != null)
        {
            if(response.Success)
            {
                _document = response.Document;
            }
        }

        _content = new MarkupString(_document.Content);
        await base.OnParametersSetAsync();
        await Task.Yield();
        await InvokeAsync(() => StateHasChanged());
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender && QuillHtml != null)
    //     {
    //         await JS.InvokeVoidAsync("initializeEditor", QuillHtml);
    //     }
    // }

    public async void Save()
    {
        //_document.Content = await this.QuillHtml.GetHTML(); ;
        SaveDocumentRequest request = new()
        {
            BookId = Book.BookId,
            Document = _document
        };

        var response = await Api.SaveDocumentAsync(request);
        StateHasChanged();
    }
}