@namespace Tessera.Web.Pages

@page "/b/{BookId:int}/l/{ChapterId:int}"

@layout BookLayout
@inject NavigationManager Navigation
@inject IBookService Book
@inject IViewService View
@inject IApiService Api


@if (_list != null)
{
    <PageTitle>@_list.Title</PageTitle>
    <div class="ts-customer-page-header">
        <button class="ts-primary-btn" @onclick="AddTask">Add Item</button>
        <button class="ts-primary-btn" @onclick="DeleteTask">Delete</button>
    </div>
    <div class="ts-customer-table-container">
        <table class="ts-customer-table">
            <thead>
                <tr>
                    <th class="col-complete">Complete</th>
                    <th class="col-name">Name</th>
                    <th class="col-description">Description</th>
                    <th class="col-calendar">Created</th>
                    <th class="col-calendar">Due</th>
                    <th class="col-selection">Priority</th>
                </tr>
            </thead>
            <tbody>
                @if (_list == null || _list.Rows.Count == 0)
                {
                    <tr>
                        <td colspan="6" style="text-align: center;">No item data available</td>
                    </tr>
                }
                else
                {
                    @for (int i = 0; i < _list.Rows.Count; i++)
                    {
                        RowDto row = _list.Rows[i];
                        var z = i;
                        <tr id="@i.ToString()"
                            class="@(IsRowSelected(z) ? "selected-row" : "")"
                            tabindex="0"
                            @onclick="() => SelectRow(z)"
                            
                            @onfocusout="SaveTaskAsync">

                            <td>
                                <div class="ts-input-container">
                                    <input class="ts-primary-input" type="checkbox"                                 @bind="row.IsComplete" />
                                </div>
                            </td>
                            <td>
                                <div class="ts-input-container">
                                    <input class="ts-primary-input" type="text" @bind="row.Name" />
                                </div>
                            </td>
                            <td>
                                <div class="ts-input-container">
                                    <input class="ts-primary-input" type="text" @bind="row.Description" />
                                </div>
                            </td>
                            <td>
                                <div class="ts-input-container">
                                    <input class="ts-primary-input"  type="date" @bind="row.Created" />
                                </div>
                            </td>
                            <td>
                                <div class="ts-input-container">
                                    <input class="ts-primary-input"  type="date" @bind="row.Due" />
                                </div>
                            </td>
                            <td>
                                <div class="ts-input-container">
                                    <select @bind="row.Priority">
                                        <option value="@Priority.Low">Low</option>
                                        <option value="@Priority.Moderate">Moderate</option>
                                        <option value="@Priority.High">High</option>
                                    </select>
                                </div>
                            </td>
                        </tr>
                    } 
                }
                <tr>
                    <td colspan="6" style="text-align: center;">
                        <button class="ts-primary-btn" @onclick="AddTask">Add Item</button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
}
else
{
    <PageTitle>Loading</PageTitle>
}

@* <AddRowItem @ref="addRowItem" OnAddCustomer="AddTask"/> *@
@* <RowInfo @ref="rowInfo" OnUpdateCustomer="UpdateCustomer"/> *@

@code {
    [Parameter] public int BookId { get; set; }
    [Parameter] public int ChapterId { get; set; }

    private ListDto _list = new();
    private int _selectedRowIndex; // Tracks the selected row index
    private RowDto? _selectedRow;  // Tracks the selected row object
    private MarkupString _errorMsg;

    protected override async Task OnInitializedAsync()
    {

        var response = await Api.GetListAsync(BookId, ChapterId);
        if (response != null)
        {
            if(response.Success)
            {
                _list = response.List;
            }
        }

        await base.OnInitializedAsync();
        StateHasChanged();
    }


    private void SelectRow(int index)
    {
        _selectedRowIndex = index;
        _selectedRow = new RowDto(_list.Rows[index]);
    }


    private bool IsRowSelected(int index)
    {
        return _selectedRowIndex == index;
    }


    public async void AddTask()
    {
        var response = await Api.AddRowAsync(new ApiRowRequest()
        {
            BookId = Book.BookId,
            ChapterId = ChapterId,
            Row = new RowDto()
        });

        if (response.Success)
        {
            _list.Rows.Add(new RowDto());
            StateHasChanged();
        }
    }


    public async Task SaveTaskAsync()
    {
        // if (_selectedRow != null && !_selectedRow.Equals(_list.Rows[_selectedRowIndex]))
        // {
        var response = await Api.UpdateRowAsync(new ApiRowRequest()
            {
                BookId = BookId,
                ChapterId = ChapterId,
                    Row = _list.Rows[_selectedRowIndex]
            });

        if (!response.Success)
        {

        }
        //}
    }


    public async void DeleteTask()
    {
        var response = await Api.DeleteRowAsync(BookId, ChapterId, _list.Rows[_selectedRowIndex].Id);
        if (response.Success)
        {
            _list.Rows.RemoveAt(_selectedRowIndex);
            StateHasChanged();
        }
    }

    private void ScheduleNotification()
    {
        var scheduledTime = DateTime.UtcNow.AddSeconds(10); 
        View.ScheduleNotification("This is a test notification", scheduledTime);
    }
}