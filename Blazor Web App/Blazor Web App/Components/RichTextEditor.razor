@namespace Tessera.Web

@using Microsoft.AspNetCore.Components.Web

@inject IJSRuntime JS

<div class="rich-text-editor">
    <!-- Toolbar for formatting options -->
    <div class="toolbar">
        <button type="button" @onclick='() => ExecuteCommand("bold")'>Bold</button>
        <button type="button" @onclick='() => ExecuteCommand("italic")'>Italic</button>
        <button type="button" @onclick='() => ExecuteCommand("underline")'>Underline</button>
        <button type="button" @onclick='() => ExecuteCommand("insertOrderedList")'>Numbered List</button>
        <button type="button" @onclick='() => ExecuteCommand("insertUnorderedList")'>Bullet List</button>
        <button type="button" @onclick="Save">Save</button>
    </div>

    <div style="border: 2px solid red">
        <div contenteditable="true"
             @ref="editorRef"
             class="editor"
             @oninput="HandleInput"
             @onblur="UpdateContent">
        </div>
    </div>
</div>
@code {
    private ElementReference editorRef;
    [Parameter] public string Content { get; set; } = "<p>Default content here...</p>";
    [Parameter] public EventCallback<string> ContentChanged { get; set; }
    [Parameter] public EventCallback<string> OnSave { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setEditorContent", editorRef, Content);
        }
    }

    private async Task ExecuteCommand(string command)
    {
        await JS.InvokeVoidAsync("execCommandOnContent", command);
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        Content = await JS.InvokeAsync<string>("getEditorContent", editorRef);
        Console.WriteLine();
    }

    private async Task UpdateContent()
    {
        await ContentChanged.InvokeAsync();
    }

    private async Task Save()
    {
        await OnSave.InvokeAsync(Content);
    }

    public async Task Refresh()
    {
        await JS.InvokeVoidAsync("setEditorContent", editorRef, Content);
        StateHasChanged();
    }
}
